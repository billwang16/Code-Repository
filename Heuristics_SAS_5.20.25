/*data locations*/
libname bw 'G:\Bill\Heuristics'; 
libname jyk 'G:\JooYeon\data'; 
libname ready3 ODBC DSN=PA_MA_READY_B  schema=live; /*V3.0 cleaned*/

/*import supplmentary data*/
/*NDC codes for MOUD*/
proc import out=ndc datafile="G:\JooYeon\data\MODRN_MOUD_plus_NQF3175_2021ver_new_type.xlsx" 
			dbms=xlsx replace;
	sheet="NDC";
	getnames=yes;
run;

/*HCPCS/CPT codes for MOUD*/
proc import out=MOUD_proc datafile="G:\JooYeon\data\MODRN_MOUD_plus_NQF3175_2021ver_new_type.xlsx" 
			dbms=xlsx replace;
	sheet="HCPCS";
	getnames=yes;
run;

/*RUCA*/
proc import out=RUCA datafile="G:\JooYeon\data\RUCA2010zipcode_08172020.xlsx" /*PLEASE CHANGE THE PATHWAY ACCORDINGLY. This file is saved in: Box > MultiState Medicaid OUD > Derived Enrollee Characteristics*/
			dbms=xlsx replace;
	sheet="Data";
	getnames=yes;
run;

/*ICD-10 diagnosis codes for SUDs*/
proc import out=sud datafile="G:\JooYeon\data\MACPAC SUD_codes_no_nicotine_tobacco_no_poisoning_July2021.xlsx" /*PLEASE CHANGE THE PATHWAY ACCORDINGLY*/
			dbms=xlsx replace;
	sheet="SUD ICD CM codes_NEW";
	getnames=yes;
run;
*453;

data bw.sud;
	set sud;
	if remission=1 or diag in: ('F11') then delete;
run;
*393;

%let sud=;
data _null_;
 set sud;
 call symput('sud',trim(resolve('&sud'))||' "'||trim(diag)||'"');
 run;
%put &sud;/*DIAG*/



/*ICD-10 diagnosis codes for opioid-related overdose*/
proc import out=opioid_poisoning datafile="G:\JooYeon\data\opioid_overdose_poisoning_Green.xlsx" /*PLEASE CHANGE THE PATHWAY ACCORDINGLY*/
			dbms=xlsx replace;
	sheet="opioid_overdose_Green";
	getnames=yes;
run;

/*formatting*/
proc format;
	value $missfmt ' '='Missing' other='Not Missing';
	value missfmt .='Missing' other='Not Missing';
run;

proc format;
	value race_ethfmt 1 = 'Non-Hispanic white'
       		          2 = 'Non-Hispanic black'
                      3 = 'Hispanic'
                      4 = 'Others'
					  5 = 'Unknown/Missing';
run;

proc format;
	value $elig_catfmt
	'1'=  'Partial benefit non-dual'
	'2a'= 'Full benefit dual'
	'2b'= 'Partial benefit dual, QMB-only'
	'2c'= 'Partial benefit dual, non-QMB'
	'2'=  'Dual (unable to categorize further)'
	'3'=  'Disabled'
	'4'=  'Children'
	'5'=  'Expansion adults'
	'6'=  'Non-disabled adults/Pregnancy';
run;

proc format;
	value	age_gp  	1 =  ' 12-20 ' 
						2 =  ' 21-34 ' 
						3 =  ' 35-44 ' 
						4 =  ' 45-54 '
						5 =  ' 55-64 ' 
						;
run;

proc format;
	value	area_fmt  	0 =  'Urban' 
						1 =  'Rural' 
						2 =  'Missing Category';
run;

proc format;
	value typefmt 	1 = 'Oral Buprenorphine or Buprenorphine/naloxone'
       		        2 = 'Oral Methadone'
                    3 = 'Oral Naltrexone'
					4 = 'IM Naltrexone'
					5 = 'IM Buprenorphine'
					6 = 'Implant Buprenorphine'
					7 = 'Implant Naltrexone'
					8 = 'Patch Buprenorphine';
run;

proc format;
	value typefmt 	1 = 'Buprenorphine or Buprenorphine/naloxone'
       		        2 = 'Methadone'
                    3 = 'Naltrexone'
					4 = 'IM Naltrexone';
run;



/*construct sample*/
/*monthly observations for enrollees age 12-64, full-benefit, non-dual*/
%macro enroll_monthly;
%do yr=2016 %to 2022;
proc sql;
	create table bw.enrl_FBND_monthly_&yr. as
	select distinct enrl_id, month, dob, race_ethnic format race_ethfmt., elig_cat format $elig_catfmt., &yr. as year
	from jyk.mcdm_3_0_enrl_monthly_&yr. (keep=ENRL_ID MONTH DOB RACE_ETHNIC ELIG_CAT)
	where (("31Dec&yr."d-dob)/365.25)<65 and (("01Jan&yr."d-dob)/365.25)>=12 and elig_cat in ('3','4','5','6');
quit;

%end;
%mend enroll_monthly;
%enroll_monthly

/*annual observations non-dual, full-benefit Medicaid enrollees who are 12-64 years of age for the duration of the year*/
%macro enroll_yearly1;
%do yr=2016 %to 2022;
proc sql; 
	create table enrl_&yr. as
	select distinct ENRL_ID, DOB, DOD, RACE_ETHNIC format race_ethfmt., ELIG_CAT format $elig_catfmt., GENDER, ZIP5, &yr. as year
	from jyk.mcdm_3_0_enrl_&yr. (keep=ENRL_ID DOB DOD RACE_ETHNIC ELIG_CAT GENDER ZIP5)
	where (("31Dec&yr."d-dob)/365.25)<65 and (("01Jan&yr."d-dob)/365.25)>=12 and elig_cat in ('3','4','5','6');
quit;

%end;
%mend enroll_yearly1;
%enroll_yearly1


%macro enroll_yearly2;
%do yr=2016 %to 2022;
data bw.enrl_&yr.;
	set enrl_&yr.;
	age=(("31Dec&yr."d-dob)/365.25);

	if 12<=age<21 then age_gp=1;
	else if 21<=age<35 then age_gp=2;
	else if 35<=age<45 then age_gp=3;
	else if 45<=age<55 then age_gp=4;
	else if 55<=age<65 then age_gp=5;

	if dod^=. and year(DOD)<&yr. then delete; /*data error*/

	format age_gp age_gp.;
run;

%end;
%mend enroll_yearly2;
%enroll_yearly2

/*pull pharmacy/claims files*/
%macro pull1;
%do yr=2016 %to 2022;

proc sql;
	create table clm_&yr. as
	select *
	from jyk.mcdm_3_0_clm_&yr. (keep=CLM_ID DETAIL_NUMBER enrl_id dos: diag: proc_code mod: IP rev_code: POS 
BILLING_PROVIDER_ID PERFORMING_PROVIDER_ID B_PROV_NPI P_PROV_NPI ATTENDING_PROV_NPI SERVICING_PROV_NPI 
SERVICING_LOC_PROV_NPI ATTENDING_PROVIDER_ID SERVICING_PROVIDER_ID SERVICING_LOC_PROVIDER_ID DELIVERING_PROVIDER_ID 
DELIVERING_PROV_NPI);
quit;

%end;
%mend pull1;
%pull1

%macro pull2;
%do yr=2016 %to 2022;

proc sql;
	create table pharm_&yr. as
	select *
	from jyk.mcdm_3_0_pharm_&yr. (keep=CLM_ID DETAIL_NUMBER enrl_id dos days_supply ndc BILLING_PROVIDER_ID 
PERFORMING_PROVIDER_ID B_PROV_NPI P_PROV_NPI PRESCRIBING_PROVIDER_ID PRSC_PROV_NPI);
quit;

%end;
%mend pull2;
%pull2


/*sort by enrl_id*/
%macro sort1;
%do yr=2016 %to 2022;

proc sort data = clm_&yr out = clm_&yr; 
by enrl_id;
run;

%end;
%mend sort1;
%sort1

%macro sort2;
%do yr=2016 %to 2022;

proc sort data = pharm_&yr out = pharm_&yr; 
by enrl_id;
run;

%end;
%mend sort2;
%sort2



/*subset pharmacy/claims to those in subseted enrollment*/
%macro dedup1;
%do yr=2016 %to 2022;
data enroll_ID_&yr.;
set bw.enrl_FBND_monthly_&yr. (keep = enrl_id);
run;

proc sort nodupkey data = enroll_ID_&yr. out = enroll_ID_&yr.; 
by enrl_id;
run;

%end;
%mend dedup1;
%dedup1

%macro subset1;
%do yr=2016 %to 2022;
data bw.clm_&yr.;
  merge clm_&yr. (in=a) enroll_ID_&yr.(in=b); 
  by enrl_id;
  if a & b;
run;

%end;
%mend subset1;
%subset1

%macro subset2;
%do yr=2016 %to 2022;

data bw.pharm_&yr.;
  merge pharm_&yr. (in=a) enroll_ID_&yr.(in=b); 
  by enrl_id;
  if a & b;
run;

%end;
%mend subset2;
%subset2

/*identify MOUD claims based on NDC. Pharmacy claims for medications with negative, missing, or zero days  supply were not included.*/
%macro moud_pharm;
%do yr=2016 %to 2022;
proc sql;
	create table moud_ndc_&yr. as
	select a.clm_id, a.detail_number, a.enrl_id, a.dos, a.days_supply, b.type format typefmt., a.dos+a.days_supply-1 as dos_end format date9.,
	a.BILLING_PROVIDER_ID, a.PERFORMING_PROVIDER_ID, a.B_PROV_NPI, a.P_PROV_NPI, a.PRESCRIBING_PROVIDER_ID, a.PRSC_PROV_NPI
	from bw.pharm_&yr. as a, ndc as b
	where a.ndc=b.ndc and a.days_supply>0;
quit;

data moud_ndc_&yr.;
	set moud_ndc_&yr.;

	if type in (4, 5) then do;
		dos_end=dos+29;/*Naltrexone and buprenorphine injections contribute 30 days  supply*/
		days_supply=30;
	end;

	if type=6 then do;
		dos_end=dos+179;/*buprenorphine implants contribute 180 days  supply*/
		days_supply=180;
	end;
run;
%end;
%mend moud_pharm;
%moud_pharm


/*identify MOUD claims based on PROC_CODE*/
%macro moud_claim;
%do yr=2016 %to 2022;
proc sql;
	create table moud_proc_&yr. as
	select a.clm_id, a.detail_number, a.enrl_id, a.dos_start, a.dos_end, a.proc_code, b.type format typefmt., b.days_supply,
	a.BILLING_PROVIDER_ID, a.PERFORMING_PROVIDER_ID, a.B_PROV_NPI, a.P_PROV_NPI
	from bw.clm_&yr. (keep=CLM_ID DETAIL_NUMBER enrl_id dos_start dos_end proc_code BILLING_PROVIDER_ID 
PERFORMING_PROVIDER_ID B_PROV_NPI P_PROV_NPI) as a, MOUD_proc as b
	where a.proc_code=b.HCPCS_Code
	order by a.enrl_id, a.dos_start, a.dos_end;
quit;

data moud_proc_&yr.;
	set moud_proc_&yr.;
	if days_supply=. then days_supply=dos_end-dos_start+1;
	if days_supply^=. then dos_end=dos_start+days_supply-1;
run;
%end;
%mend moud_claim;
%moud_claim


/*combine MOUD encounters*/
%macro moud_combined;
%do yr=2016 %to 2022;
data bw.MOUD_&yr.;
	set moud_ndc_&yr. (rename=(dos=dos_start)) moud_proc_&yr.;
	if type in (1,5,6,8) then BUP=1;
	if type=2 then MTD=1;
	if type=3 then NALTREX_ORAL=1;
	if type in (4,7) then NALTREX_IM=1;
run;

proc sql;
	create table bw.any_MOUD_&yr. as
	select distinct enrl_id, 1 as MOUD, max(BUP) as BUP, max(MTD) as MTD, max(NALTREX_ORAL) as NALTREX_ORAL, max(NALTREX_IM) as NALTREX_IM
	from bw.MOUD_&yr.
	group by enrl_id;
quit;

%end;
%mend moud_combined;
%moud_combined

/*enrollment periods to identify continous enrollment later*/
/*pull begin/end dates, tranpose to long format*/
%macro enrollment1;
%do yr=2022 %to 2022;
proc sql;
	create table ENRL_period_&yr. as
	select *
	from jyk.mcdm_3_0_enrl_&yr. (keep=ENRL_ID b_date: e_date:)
	order by ENRL_ID;
quit;
%end;
%mend enrollment1;
%enrollment1

%macro transpose1;
%do yr=2022 %to 2022;
proc transpose data=ENRL_period_&yr. out=long1_&yr. prefix=b_date;
   	by enrl_id;
	var b_date:;
run;

proc transpose data=ENRL_period_&yr. out=long2_&yr. prefix=e_date;
   	by enrl_id;
	var e_date:;
run;
%end;
%mend transpose1;
%transpose1

/*merge and sort*/
%macro merge1;
%do yr=2022 %to 2022;
data ENRL_period_&yr._long;
   merge long1_&yr. (rename=(b_date1=b_date) keep=enrl_id b_date1) long2_&yr. (rename=(e_date1=e_date) keep=enrl_id e_date1);
   by enrl_id;
run;

data bw.ENRL_period_&yr._long;
	set ENRL_period_&yr._long;
	if b_date=. and e_date=. then delete;
run;

proc sort data=bw.ENRL_period_&yr._long;
	by enrl_id b_date e_date;
run;
%end;
%mend merge1;
%merge1

/*identify continuously enrolled segments*/
%macro cont_enroll1;
%do yr=2022 %to 2022;
data bw.ENRL_period_&yr._long2; 
	set bw.ENRL_period_&yr._long; 
		by enrl_id; 
retain new_b_date new_e_date;
 
	if first.enrl_id then do;
		new_b_date = b_date;
		new_e_date = e_date;
	end; 

	if (b_date le (new_e_date + 1)) then do;
		b_date = new_b_date;
		new_e_date = e_date;
	end;

	else do;
		new_b_date = b_date;
		new_e_date = e_date;
	end;
	
	format new_b_date date9. new_e_date date9.;
run;

proc sort data=bw.ENRL_period_&yr._long2; 
	by enrl_id b_date;
run;
%end;
%mend cont_enroll1;
%cont_enroll1

%macro cont_enroll2;
%do yr=2022 %to 2022;
data ENRL_period_&yr._long3;
	set bw.ENRL_period_&yr._long2; 
		by enrl_id b_date;

	if last.b_date then output;
run;

data ENRL_period_&yr._long3;
	set ENRL_period_&yr._long3;
	cont_enrl=1;
	drop new_b_date new_e_date;
run;

data bw.ENRL_period_&yr._long3;
	set ENRL_period_&yr._long3;
	days_enrolled=e_date-b_date+1;
run;
%end;
%mend cont_enroll2;
%cont_enroll2

/*continous enrollment - descriptive table*/
proc sql;
	create table days_enrolled2022 as
	select distinct enrl_id, sum(days_enrolled) as days_enrolled
	from bw.ENRL_period_2022_long3
	group by enrl_id;
quit;

/*Identify claims with with a diagnosis of OUD*/
%macro oud_diag;
%do yr=2016 %to 2022;
data bw.OUD_&yr. (keep=enrl_id dos_start oud BILLING_PROVIDER_ID PERFORMING_PROVIDER_ID B_PROV_NPI P_PROV_NPI ATTENDING_PROV_NPI SERVICING_PROV_NPI 
SERVICING_LOC_PROV_NPI ATTENDING_PROVIDER_ID SERVICING_PROVIDER_ID SERVICING_LOC_PROVIDER_ID DELIVERING_PROVIDER_ID 
DELIVERING_PROV_NPI);
	set bw.clm_&yr. (keep=enrl_id dos: diag: BILLING_PROVIDER_ID PERFORMING_PROVIDER_ID B_PROV_NPI P_PROV_NPI ATTENDING_PROV_NPI SERVICING_PROV_NPI 
SERVICING_LOC_PROV_NPI ATTENDING_PROVIDER_ID SERVICING_PROVIDER_ID SERVICING_LOC_PROVIDER_ID DELIVERING_PROVIDER_ID 
DELIVERING_PROV_NPI);


	array	Diag $ diag:;
		do	I = 1 to dim(diag);
			if	Diag(i) in: ('F11') 										then	OUD =1;
	
			end;
		drop I;

	if  OUD=1 then output bw.OUD_&yr.;
run;
%end;
%mend oud_diag;
%oud_diag

/*oud summary table*/
proc sql;
	create table OD_summ&yr. as
	select distinct enrl_id, max(od) as OD, count(distinct dos_start) as N_OD
	from OD_&yr.
	where year(dos_start)=&yr.
	group by enrl_id;
quit;

"Construct dependent variable"
/*pull UDT claims*/
%macro udt1;
%do yr=2016 %to 2022;
data bw.udt_&yr. (keep=enrl_id PROC_CODE dos_start udt BILLING_PROVIDER_ID PERFORMING_PROVIDER_ID B_PROV_NPI P_PROV_NPI ATTENDING_PROV_NPI SERVICING_PROV_NPI 
SERVICING_LOC_PROV_NPI ATTENDING_PROVIDER_ID SERVICING_PROVIDER_ID SERVICING_LOC_PROVIDER_ID DELIVERING_PROVIDER_ID 
DELIVERING_PROV_NPI);
	set bw.clm_&yr. (keep=enrl_id PROC_CODE dos: BILLING_PROVIDER_ID PERFORMING_PROVIDER_ID B_PROV_NPI P_PROV_NPI ATTENDING_PROV_NPI SERVICING_PROV_NPI 
SERVICING_LOC_PROV_NPI ATTENDING_PROVIDER_ID SERVICING_PROVIDER_ID SERVICING_LOC_PROVIDER_ID DELIVERING_PROVIDER_ID 
DELIVERING_PROV_NPI);

if PROC_CODE in ('G0431', 'G0434', 'G0477', 'G0478', 'G0479', 'H0003','H0048', '80100', '80101', '80102', '80104', '80152', 
'80154', '80160', '80166', '80300', '80301', '80302', '80303', '80304', '80305', '80306', '80307', '80320', '80321', 
'80322', '80323', '80324', '80325', '80326', '80327', '80328', '80329', '80330', '80331', '80332', '80333', '80334', 
'80335', '80336', '80337', '80338', '80339', '80340', '80341', '80342', '80343', '80344', '80345', '80346', '80347', 
'80348', '80349', '80350', '80351', '80352', '80353', '80354', '80355', '80356', '80357', '80358', '80359', '80360', 
'80361', '80362', '80363', '80364', '80365', '80366', '80367', '80368', '80369', '80370', '80371', '80372', '80373', 
'80374', '80375', '80376', '80377', '82101', '82520', '82646', '82649', '82742', '83925', '83992', '0020U', '0006U', 
'0007U', 'G0430', 'G0480', 'G0481', 'G0482', 'G0483', 'G0659', 'G6031', 'G6032', 'G6034', 'G6036', 'G6037', 'G6041', 
'G6042', 'G6043', 'G6044', 'G6045', 'G6048', 'G6050', 'G6053', 'G6056') then udt = 1;

	if  udt=1 then output bw.udt_&yr.;
run;
%end;
%mend udt1;
%udt1

/*descriptive analysis of provider IDs*/
/*create year variable*/
%macro year1;
%do yr=2016 %to 2022;

data bw.udt2_&yr.;
set bw.udt_&yr.;
year = year(dos_start);
run;

%end;
%mend year1;
%year1

%macro year2;
%do yr=2016 %to 2022;

data bw.oud2_&yr.;
set bw.oud_&yr.;
year = year(dos_start);
run;

%end;
%mend year2;
%year2

%macro year3;
%do yr=2016 %to 2022;

data bw.moud2_&yr.;
set bw.moud_&yr.;
year = year(dos_start);
if PRESCRIBING_PROVIDER_ID =. then PRESCRIBING_PROVIDER_ID = PERFORMING_PROVIDER_ID;
if PRSC_PROV_NPI =. then PRSC_PROV_NPI = P_PROV_NPI;
run;

%end;
%mend year3;
%year3


/*combine data - all years*/
data bw.udt_allyears;
set bw.udt2_2016 bw.udt2_2017 bw.udt2_2018 bw.udt2_2019 bw.udt2_2020 bw.udt2_2021 bw.udt2_2022;
run;

data bw.oud_allyears;
set bw.oud2_2016 bw.oud2_2017 bw.oud2_2018 bw.oud2_2019 bw.oud2_2020 bw.oud2_2021 bw.oud2_2022;
run;

data bw.moud_allyears;
set bw.moud2_2016 bw.moud2_2017 bw.moud2_2018 bw.moud2_2019 bw.moud2_2020 bw.moud2_2021 bw.moud2_2022;
run;


/*check missingness of provider ID/NPIs*/
proc freq data=bw.udt_allyears; 
format _CHAR_ $missfmt.; /* apply format for the duration of this PROC */
tables _CHAR_ / missing missprint nocum nopercent;
format _NUMERIC_ missfmt.;
tables _NUMERIC_ / missing missprint nocum nopercent;
run;

proc freq data=bw.oud_allyears; 
format _CHAR_ $missfmt.; /* apply format for the duration of this PROC */
tables _CHAR_ / missing missprint nocum nopercent;
format _NUMERIC_ missfmt.;
tables _NUMERIC_ / missing missprint nocum nopercent;
run;

proc freq data=bw.moud_allyears; 
format _CHAR_ $missfmt.; /* apply format for the duration of this PROC */
tables _CHAR_ / missing missprint nocum nopercent;
format _NUMERIC_ missfmt.;
tables _NUMERIC_ / missing missprint nocum nopercent;
run;

/*match MOUD encounters to OUD encounters, UDT encounters to OUD encounters, and UDT encounters to MOUD encounters*/
/*create month variable*/
data bw.udt_allyears;
set bw.udt_allyears;
month = month(dos_start);
run;

data bw.oud_allyears;
set bw.oud_allyears;
month = month(dos_start);
run;

data bw.moud_allyears;
set bw.moud_allyears;
month = month(dos_start);
run;

/*dedup*/
proc sort data=bw.moud_allyears out=bw.moud_allyears_dedup nodupkey;
by enrl_id dos_start;
run;

/*keep only needed columns for merge*/
data udt_trun;
set bw.udt_allyears (keep = enrl_id dos_start billing_provider_id performing_provider_id delivering_provider_id year month);
rename billing_provider_id = billing_udt;
rename performing_provider_id = performing_udt;
rename delivering_provider_id = delivering_udt;
run;

data oud_trun;
set bw.oud_allyears (keep = enrl_id dos_start billing_provider_id performing_provider_id delivering_provider_id year month);
rename billing_provider_id = billing_oud;
rename performing_provider_id = performing_oud;
rename delivering_provider_id = delivering_oud;
run;

data moud_trun;
set bw.moud_allyears (keep = enrl_id dos_start billing_provider_id performing_provider_id prescribing_provider_id year month);
rename billing_provider_id = billing_moud;
rename performing_provider_id = performing_moud;
run;

/*dedup by enrollee ID and date*/
proc sort data=udt_trun out=udt_trun2 nodupkey;
by enrl_id dos_start;
run;

proc sort data=oud_trun out=oud_trun2 nodupkey;
by enrl_id dos_start;
run;

proc sort data=moud_trun out=moud_trun2 nodupkey;
by enrl_id dos_start;
run;

/*rename date variables*/
data udt_trun2;
set udt_trun2;
rename dos_start = udt_date;
run;

data oud_trun2;
set oud_trun2;
rename dos_start = oud_date;
run;

data moud_trun2;
set moud_trun2;
rename dos_start = moud_date;
run;

/*match UDT to OUD - 7 days*/
proc sql;
	create table bw.udt_oud_match_7days as
		select a.enrl_id, a.udt_date, b.oud_date, 1 as udt_w_oud_win_7days
			from udt_trun2 as a inner join oud_trun2 as b
				on a.enrl_id=b.enrl_id and a.udt_date-7<=b.oud_date<=a.udt_date+7;
quit;

proc sort data=bw.udt_oud_match_7days nodupkey; 
by enrl_id udt_date; 
run;

/*match MOUD to OUD - 7 days*/
proc sql;
	create table bw.moud_oud_match_7days as
		select a.enrl_id, a.moud_date, a.prescribing_provider_id, b.oud_date, b.performing_oud, b.delivering_oud, 
		1 as moud_w_oud_win_7days
			from moud_trun2 as a inner join oud_trun2 as b
				on a.enrl_id=b.enrl_id and a.moud_date-7<=b.oud_date<=a.moud_date+7;
quit;

proc sort data=bw.moud_oud_match_7days out = bw.moud_oud_match_7days_dedup nodupkey; 
by enrl_id moud_date; 
run;

/*match UDT to OUD - 14 days*/
proc sql;
	create table bw.udt_oud_match_14days as
		select a.enrl_id, a.udt_date, b.oud_date, 1 as udt_w_oud_win_14days
			from udt_trun2 as a inner join oud_trun2 as b
				on a.enrl_id=b.enrl_id and a.udt_date-14<=b.oud_date<=a.udt_date+14;
quit;

proc sort data=bw.udt_oud_match_14days out=bw.udt_oud_match_14days_dedup nodupkey; 
by enrl_id udt_date; 
run;

/*match MOUD to OUD - 14 days*/
proc sql;
	create table bw.moud_oud_match_14days as
		select a.enrl_id, a.moud_date, a.prescribing_provider_id, b.oud_date, b.performing_oud, b.delivering_oud, 
		1 as moud_w_oud_win_14days
			from moud_trun2 as a inner join oud_trun2 as b
				on a.enrl_id=b.enrl_id and a.moud_date-14<=b.oud_date<=a.moud_date+14;
quit;

proc sort data=bw.moud_oud_match_14days out = bw.moud_oud_match_14days_dedup nodupkey; 
by enrl_id oud_date; 
run;

/*Provider ID match for UDT_OUD*/
data bw.udt_oud_match;
set bw.udt_oud_match;
if billing_udt = billing_oud then billing_match = 1;
if performing_udt = performing_oud then performing_match = 1;
run;

proc freq data=bw.udt_oud_match; 
format _CHAR_ $missfmt.; /* apply format for the duration of this PROC */
tables _CHAR_ / missing missprint nocum nopercent;
format _NUMERIC_ missfmt.;
tables _NUMERIC_ / missing missprint nocum nopercent;
run;

/*Provider ID match for MOUD_OUD - 14 days*/
data bw.moud_oud_match_14days_dedup;
set bw.moud_oud_match_14days_dedup;
if prescribing_provider_id = performing_oud then performing_match = 1;
if prescribing_provider_id = delivering_oud then delivering_match = 1;
if performing_match = 1 or delivering_match = 1 then match = 1;
run;

proc freq data=bw.moud_oud_match_14days_dedup; 
format _CHAR_ $missfmt.; /* apply format for the duration of this PROC */
tables _CHAR_ / missing missprint nocum nopercent;
format _NUMERIC_ missfmt.;
tables _NUMERIC_ / missing missprint nocum nopercent;
run;

/*Provider ID match for MOUD_OUD - 14 days, individual providers only*/
data bw.moud_oud_match_14days_dedup2;
set bw.moud_oud_match_14days_dedup;
provider_id = delivering_oud;
run;

proc sort data=bw.moud_oud_match_14days_dedup2;
by provider_id;
run;

data bw.moud_oud_match_14days_provider;
  merge bw.moud_oud_match_14days_dedup2 (in=a) bw.provider_type (in=b); 
  by PROVIDER_ID;
  if a;
run;

data bw.moud_oud_match_14days_ind;
set bw.moud_oud_match_14days_provider;
if Entity_Type_Code ne 1 then delete;
run;

proc freq data=bw.moud_oud_match_14days_ind; 
format _CHAR_ $missfmt.; /* apply format for the duration of this PROC */
tables _CHAR_ / missing missprint nocum nopercent;
format _NUMERIC_ missfmt.;
tables _NUMERIC_ / missing missprint nocum nopercent;
run;

/*pull provider specialty*/
data bw.provider_file_trun;
set ready3.provider_file_2023 (keep = PROVIDER_ID NPI NPI_new PROVIDER_GENDER PROVIDER_NAME_TYPE_INDICATOR 
PROVIDER_TYPE_CODE PROV_SPEC_CODE SVC_LOC_ZIP_CODE);
run;

/*sort*/
proc sort data = bw.provider_file_trun;
by PROVIDER_ID;
run;

/*table of type, setting, and specialty*/
PROC FREQ DATA=bw.provider_file_trun;
    TABLES PROVIDER_NAME_TYPE_INDICATOR PROVIDER_TYPE_CODE PROV_SPEC_CODE;
RUN;

/*subset individual providers*/
data bw.provider_type;
set bw.provider_file_trun (keep = PROVIDER_ID PROVIDER_NAME_TYPE_INDICATOR);
run;

/*pull provider ID from data*/
data bw.udt_billing;
set bw.udt_allyears (keep = BILLING_PROVIDER_ID);
rename BILLING_PROVIDER_ID = PROVIDER_ID;
run;

data bw.udt_performing;
set bw.udt_allyears (keep = PERFORMING_PROVIDER_ID);
rename PERFORMING_PROVIDER_ID = PROVIDER_ID;
run;

data bw.udt_delivering;
set bw.udt_allyears (keep = DELIVERING_PROVIDER_ID);
rename DELIVERING_PROVIDER_ID = PROVIDER_ID;
run;


data bw.oud_billing;
set bw.oud_allyears (keep = BILLING_PROVIDER_ID);
rename BILLING_PROVIDER_ID = PROVIDER_ID;
run;

data bw.oud_performing;
set bw.oud_allyears (keep = PERFORMING_PROVIDER_ID);
rename PERFORMING_PROVIDER_ID = PROVIDER_ID;
run;

data bw.oud_delivering;
set bw.oud_allyears (keep = DELIVERING_PROVIDER_ID);
rename DELIVERING_PROVIDER_ID = PROVIDER_ID;
run;


data bw.moud_billing;
set bw.moud_prsc_allyears (keep = BILLING_PROVIDER_ID);
rename BILLING_PROVIDER_ID = PROVIDER_ID;
run;

data bw.moud_performing;
set bw.moud_prsc_allyears (keep = PERFORMING_PROVIDER_ID);
rename PERFORMING_PROVIDER_ID = PROVIDER_ID;
run;

data bw.moud_prescribing;
set bw.moud_prsc_allyears (keep = PRESCRIBING_PROVIDER_ID);
rename PRESCRIBING_PROVIDER_ID = PROVIDER_ID;
run;

/*dedup by provider ID*/
proc sort data=bw.udt_billing out=bw.udt_billing nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.udt_performing out=bw.udt_performing nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.udt_delivering out=bw.udt_delivering nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.oud_billing out=bw.oud_billing nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.oud_performing out=bw.oud_performing nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.oud_delivering out=bw.oud_delivering nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.moud_billing out=bw.moud_billing nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.moud_performing out=bw.moud_performing nodupkey;
by PROVIDER_ID;
run;

proc sort data=bw.moud_prescribing out=bw.moud_prescribing nodupkey;
by PROVIDER_ID;
run;

/*merge provider file*/
data bw.oud_billing2;
  merge bw.oud_billing (in=a) bw.provider_file_trun (in=b); 
  by PROVIDER_ID;
  if a & b;
run;

data bw.oud_performing2;
  merge bw.oud_performing (in=a) bw.provider_file_trun (in=b); 
  by PROVIDER_ID;
  if a & b;
run;

data bw.oud_delivering2;
  merge bw.oud_delivering (in=a) bw.provider_file_trun (in=b); 
  by PROVIDER_ID;
  if a & b;
run;

data bw.udt_billing2;
  merge bw.udt_billing (in=a) bw.provider_file_trun (in=b); 
  by PROVIDER_ID;
  if a & b;
run;


data bw.udt_performing2;
  merge bw.udt_performing (in=a) bw.provider_file_trun (in=b); 
  by PROVIDER_ID;
  if a & b;
run;

data bw.udt_delivering2;
  merge bw.udt_delivering (in=a) bw.provider_file_trun (in=b); 
  by PROVIDER_ID;
  if a & b;
run;

/*provider by specialty tables*/
PROC FREQ DATA=bw.oud_billing2;
    TABLES Entity_Type_Code prov_spec PROV_TYPE_SETT;
RUN;

PROC FREQ DATA=bw.oud_performing2;
    TABLES Entity_Type_Code prov_spec PROV_TYPE_SETT;
RUN;

PROC FREQ DATA=bw.oud_delivering2;
    TABLES Entity_Type_Code prov_spec PROV_TYPE_SETT;
RUN;

PROC FREQ DATA=bw.udt_billing2;
    TABLES Entity_Type_Code prov_spec PROV_TYPE_SETT;
RUN;

PROC FREQ DATA=bw.udt_performing2;
    TABLES Entity_Type_Code prov_spec PROV_TYPE_SETT;
RUN;

PROC FREQ DATA=bw.udt_delivering2;
    TABLES Entity_Type_Code prov_spec PROV_TYPE_SETT;
RUN;

/*remove encounters where provider IDs do not match*/
data bw.moud_oud_final;
set bw.moud_oud_match_14days_dedup;
if match ^= 1 then delete;
run;

/*Unique Provider/Date*/
Proc sql;
create table bw.prov_moud_dates as 
            select distinct prescribing_provider_id, oud_date
                  from bw.moud_oud_final;
quit;

/*pull all claims from 2016-2022 attributable to providers in our list*/
%macro provider_claims1;
%do yr=2016 %to 2022;

proc sql;
	create table all_claims_prov_&yr. as
		select CLM_ID, ENRL_ID, dos_start, delivering_provider_id
			from jyk.mcdm_3_0_clm_&yr.
				where delivering_provider_id in (select prescribing_provider_id from bw.prov_moud_dates);
quit;

%end;
%mend provider_claims1;
%provider_claims1

/*pull race/ethnicity variable from enrollee files*/
%macro race1;
%do yr=2016 %to 2022;

proc sql; 
	create table race_&yr. as
	select distinct ENRL_ID, RACE_ETHNIC format race_ethfmt.
	from jyk.mcdm_3_0_enrl_&yr. (keep=ENRL_ID RACE_ETHNIC);
quit;

%end;
%mend race1;
%race1

/*merge*/
%macro merge2;
%do yr=2016 %to 2022;

proc sort data = all_claims_prov_&yr.;
by ENRL_ID;
run;

proc sort data = race_&yr.;
by ENRL_ID;
run;

data all_claims_prov2_&yr.;
  merge all_claims_prov_&yr.(in=a) race_&yr. (in=b); 
  by ENRL_ID;
  if a;
run;

%end;
%mend merge2;
%merge2

/*subset to those within 7 days of MOUD date*/
%macro provider_claims2;
%do yr=2016 %to 2022;
Proc sql;
	create table clms_7_days_prior_&yr. as
            select a.enrl_id, a.clm_id, a.race_ethnic, a.dos_start, b.prescribing_provider_id, b.oud_date
                  from all_claims_prov2_&yr. as a inner join bw.prov_moud_dates as b
                        on a.delivering_provider_id=b.prescribing_provider_id
                              where b.oud_date-7<=a.dos_start<b.oud_date;
quit;

%end;
%mend provider_claims2;
%provider_claims2

/*append all years*/
data bw.clms_7_days_prior; set 
clms_7_days_prior_2016
clms_7_days_prior_2017
clms_7_days_prior_2018
clms_7_days_prior_2019
clms_7_days_prior_2020
clms_7_days_prior_2021
clms_7_days_prior_2022; 
run;


/*calculate % race variables*/
Proc sql;
create table bw.summ_7days_prior as
      select prescribing_provider_id, oud_date,

                  count(distinct enrl_id) as total_enrollees,
                  count(distinct case when race_ethnic=1 then enrl_id end) as non_hispanic_white_enrl,
                  (calculated non_hispanic_white_enrl)/(calculated total_enrollees) *100 as pct_non_hispanic_white_enrl,
                  count(distinct case when race_ethnic=2 then enrl_id end) as non_hispanic_black_enrl,
                  (calculated non_hispanic_black_enrl)/(calculated total_enrollees) *100 as pct_non_hispanic_black_enrl,

                  count(clm_id) as total_claims,
                  count(case when race_ethnic=1 then clm_id end) as non_hispanic_white_clm,
                  (calculated non_hispanic_white_clm)/(calculated total_claims) *100 as pct_non_hispanic_white_clm,
                  count(case when race_ethnic=2 then clm_id end) as non_hispanic_black_clm,
                  (calculated non_hispanic_black_clm)/(calculated total_claims) *100 as pct_non_hispanic_black_clm
            from bw.clms_7_days_prior
                  group by prescribing_provider_id, oud_date;
quit;

Data bw.summ_7days_prior; set bw.summ_7days_prior; 

If non_hispanic_white_enrl=. Then non_hispanic_white_enrl=0;
If pct_non_hispanic_white_enrl=. Then pct_non_hispanic_white_enrl=0;

If non_hispanic_black_enrl=. Then non_hispanic_black_enrl=0;
If pct_non_hispanic_black_enrl=. Then pct_non_hispanic_black_enrl=0;

If non_hispanic_white_clm=. Then non_hispanic_white_clm=0;
If pct_non_hispanic_white_clm=. Then pct_non_hispanic_white_clm=0;

If non_hispanic_black_clm=. Then non_hispanic_black_clm=0;
If pct_non_hispanic_black_clm=. Then pct_non_hispanic_black_clm=0;

run;




/*pull SUD comorbidities*/
/*Identify claims with with a diagnosis of OUD, overdose, comorbidities*/
%macro sud;
%do yr=2016 %to 2022;
data 
	 bw.comor_&yr. (keep=enrl_id dos_start anxiety: mood: schizo: PTSD other_SUD alcohol cannabis cocaine amp_type_stimulant other_psychoactive any_other_SUD);
	set bw.clm_&yr. (keep=enrl_id dos: diag:);


	array	Diag $ diag:;
		do	I = 1 to dim(diag);
			if	Diag(i) in (&sud.) 											then	other_SUD =1;
			if	Diag(i) in: ('F10') 																then	alcohol =1;
			if	Diag(i) in: ('F12') 																then	cannabis =1;
			if	Diag(i) in: ('F14') 																then	cocaine=1;
			if	Diag(i) in: ('F15') 																then	amp_type_stimulant =1;
			if	Diag(i) in: ('F19') 																then	other_psychoactive =1;

			if	Diag(i) in: ('F13','O','F16','F18','F55') 											then	any_other_SUD=1;

If Diag(i) in ( 'F064', 'F4000', 'F4001', 'F4002', 'F4010', 'F4011', 'F40210', 'F40218', 'F40220', 'F40228', 'F40230', 'F40231', 'F40232', 'F40233', 'F40240', 'F40241', 'F40242', 'F40243', 'F40248', 'F40290', 'F40291', 'F40298', 'F408', 'F409', 'F410', 'F411', 'F413', 'F418', 'F419', 'F42', 'F430', 'F4310', 'F4311', 'F4312', 'F449', 'F458', 'F488', 'F489', 'F938', 'F99', 'R452', 'R455', 'R456', 'R457') 	
then anxiety_disorder =1; 

If Diag(i) in ('F320', 'F321', 'F322', 'F323', 'F324', 	'F325', 	'F329', 	'F330', 	'F331', 	'F332', 	'F333', 	'F3340', 'F3341', 'F3342', 'F339', 'F341', 'F3010', 'F3011', 'F3012', 'F3013', 'F302', 'F303', 	'F304', 	'F308', 	'F309', 'F310', 	'F3110', 'F3111', 'F3112', 'F3113', 'F312', 'F3130', 'F3131', 'F3132', 'F314', 'F315', 	'F3160', 'F3161', 'F3162', 'F3163', 'F3164', 'F3170', 'F3171', 'F3172', 'F3173', 'F3174', 'F3175', 'F3176', 'F3177', 'F3178', 'F3181', 'F3189', 'F319', 'F328', 	'F338', 'F348', 'F349', 'F39', 'F0630') 		
then mood_disorder =1; 

if  Diag(i) in ('F060', 'F062','F200','F201',	'F202',	'F203',	'F205',	'F2081',	'F2089',	 'F209',	'F22','F23', 'F24','F250', 'F251','F258','F259',	'F28','F29','F323','F333',	'F4489') 	
then schizo_other_psych=1; 

if  Diag(i) in ('F4310', 'F4311', 'F4312')	
then PTSD=1; 

		end;
		drop I;
	if anxiety_disorder=1 or mood_disorder=1 or schizo_other_psych=1 or PTSD=1 or other_SUD=1 then output bw.comor_&yr.;
run;
%end;
%mend sud;
%sud

/*construct provider specialty groups*/
data bw.provider_specialty_opioid;
set bw.provider_specialty_opioid;
rename PROVIDER_SPEC = PROV_SPEC_CODE;
run;

proc sort data = bw.provider_file_trun;
by PROV_SPEC_CODE;
run;

proc sort data = bw.provider_specialty_opioid;
by PROV_SPEC_CODE;
run;

data bw.provider_file_trun2;
merge bw.provider_file_trun (in=a) bw.provider_specialty_opioid (in=b);
by PROV_SPEC_CODE;
if a;
run;


/*merge outcome variable with main file*/
proc sort data = bw.udt_oud_match_14days_dedup;
by enrl_id oud_date;
run;

proc sort data = bw.moud_oud_final;
by enrl_id oud_date;
run;

data bw.moud_oud_udt;
merge bw.moud_oud_final (in=a) bw.udt_oud_match_14days_dedup (in=b);
by enrl_id oud_date;
if a;
run;

/*set missing UDT as 0*/
data bw.moud_oud_udt;
set bw.moud_oud_udt;
if udt_w_oud_win_14days =. then udt_w_oud_win_14days = 0;
run;


/*dedup by enrollee and date*/
proc sql;
create table sum_udt as
    select enrl_id, oud_date, sum(udt_w_oud_win_14days) as sum_udt
    from bw.moud_oud_udt
    group by enrl_id, oud_date;
quit;

data bw.moud_oud_udt2;
merge bw.moud_oud_udt (in=a) sum_udt (in=b);
by enrl_id oud_date;
if a;
run;


proc sort nodupkey data = bw.moud_oud_udt2 out = bw.moud_oud_udt2; 
by enrl_id oud_date;
run;

data bw.moud_oud_udt2;
set bw.moud_oud_udt2;
udt = 0;
if sum_udt >= 1 then udt = 1;
run;

/*merge independent variables with main file*/
proc sort data = bw.moud_oud_udt2;
by PRESCRIBING_PROVIDER_ID oud_date;
run;

proc sort data = bw.summ_7days_prior;
by PRESCRIBING_PROVIDER_ID oud_date;
run;

data bw.heuristics_data;
merge bw.moud_oud_udt2 (in=a) bw.summ_7days_prior (in=b);
by PRESCRIBING_PROVIDER_ID oud_date;
if a;
run;

/*drop if provider ID or independent variable empty*/
data bw.heuristics_data2;
set bw.heuristics_data;
if PRESCRIBING_PROVIDER_ID =. then delete;
if pct_non_hispanic_black_clm =. then delete;
run;


/*create quartile variable*/
/*calculate quartiles*/
proc univariate data=bw.heuristics_data2;
    var pct_non_hispanic_black_clm;
    output out=quartile_data
    pctlpts = 25 50 75
    pctlpre = Q_;
run;
/*25%:2.92, 50%: 5.25, 75%:14.63*/

data bw.heuristics_data2;
set bw.heuristics_data2;
quartile1_black = 0;
quartile2_black = 0;
quartile3_black = 0;
quartile4_black = 0;
if pct_non_hispanic_black_clm < 2.92 then quartile1_black = 1;
if pct_non_hispanic_black_clm >= 2.92 and pct_non_hispanic_black_clm < 5.25 then quartile2_black = 1;
if pct_non_hispanic_black_clm >= 5.25 and pct_non_hispanic_black_clm < 14.63 then quartile3_black = 1;
if pct_non_hispanic_black_clm >= 14.63 then quartile4_black = 1;
run;


/*merge provider specialty*/
data bw.provider_file_trun3;
set bw.provider_file_trun2 (keep = PROVIDER_ID PROVIDER_GENDER PROV_CAT SVC_LOC_ZIP_CODE);
rename PROVIDER_ID = PRESCRIBING_PROVIDER_ID;
run;

proc sort data = bw.heuristics_data2;
by PRESCRIBING_PROVIDER_ID;
run;

proc sort nodupkey data = bw.provider_file_trun3 out = bw.provider_file_trun4;
by PRESCRIBING_PROVIDER_ID;
run;

data bw.heuristics_data3;
merge bw.heuristics_data2 (in=a) bw.provider_file_trun4 (in=b);
by PRESCRIBING_PROVIDER_ID;
if a;
run;

/*merge other SUD*/
/*merge all years*/
data bw.comor;
set bw.comor_2016 bw.comor_2017 bw.comor_2018 bw.comor_2019 bw.comor_2020 bw.comor_2021 bw.comor_2022;
run;

data bw.comor2;
set bw.comor (keep = ENRL_ID other_sud);
run;

/*dedup by enrollee*/
data bw.comor2;
set bw.comor2;
if other_sud =. then delete;
run;

proc sort nodupkey data = bw.comor2 out = bw.comor2;
by enrl_id;
run;

/*sort and merge*/
proc sort data = bw.heuristics_data3;
by enrl_id;
run;

proc sort data = bw.comor2;
by enrl_id;
run;

data bw.heuristics_data4;
merge bw.heuristics_data3 (in=a) bw.comor2 (in=b);
by enrl_id;
if a;
run;

/*set missing other_sud as 0*/
data bw.heuristics_data4;
set bw.heuristics_data4;
if other_sud =. then other_sud = 0;
run;

/*merge RUCA file*/
data bw.ruca;
set ruca (keep = ZIP_CODE RUCA1);
rename ZIP_CODE = SVC_LOC_ZIP_CODE;
run;

proc sort data = bw.heuristics_data4;
by SVC_LOC_ZIP_CODE;
run;

proc sort data = bw.ruca;
by SVC_LOC_ZIP_CODE;
run;

data bw.heuristics_data5;
merge bw.heuristics_data4 (in=a) bw.ruca (in=b);
by SVC_LOC_ZIP_CODE;
if a;
run;

/*set metropolitan/non-metropolitan*/
data bw.heuristics_data5;
set bw.heuristics_data5;
metro = 0;
if RUCA1 <= 3 then metro = 1;
run;

/*merge age+sex+race+eligibility variables*/
data bw.heuristics_data5;
set bw.heuristics_data5;
year = year(oud_date);
run;

data enrl;
set bw.enrl_2016 bw.enrl_2017 bw.enrl_2018 bw.enrl_2019 bw.enrl_2020 bw.enrl_2021 bw.enrl_2022;
run;

data enrl;
set enrl (keep = enrl_id race_ethnic elig_cat gender year age age_gp);
run;

proc sort data = bw.heuristics_data5;
by enrl_id year;
run;

proc sort data = enrl;
by enrl_id year;
run;

data bw.heuristics_data_final;
merge bw.heuristics_data5 (in=a) enrl (in=b);
by enrl_id year;
if a;
run;

/*ANALYSES*/
/*Figure 1: Histogram of % Non-Hispanic Black*/
title 'Distribution of % Non-Hispanic Black in 7-days Prior';
proc univariate data=bw.heuristics_data_final noprint;
   histogram pct_non_hispanic_black_clm / midpoints    = 0 to 100 by 5
                     rtinclude
                     outhistogram = OutMdpts
                     odstitle     = title;
run;

proc univariate data=bw.heuristics_data_final;
    var pct_non_hispanic_black_clm;
    output out=quartile_data
    pctlpts = 5 25 50 75 95
    pctlpre = Q_;
run;

/*Figure 2: Rate of UDT by race/ethnicity and year*/
data bw.udt_enrl;
merge bw.udt_oud_match_14days_dedup (in=a) enrl (in=b);
by enrl_id year;
if a;
run;


proc sort data = bw.moud_oud_final;


/*Table 2: Characteristics of MOUD providers across all years*/
data table2;
set bw.heuristics_data_final (keep = PRESCRIBING_PROVIDER_ID PROV_CAT RUCA1);
run;

proc sort nodupkey data = table2 out = table2;
by PRESCRIBING_PROVIDER_ID;
run;

title "Table 2: Characteristics of MOUD providers across all years";
proc freq data=table2;
	tables PROV_CAT RUCA1/nocum norow nopercent missing;
	ods output crosstabfreqs=table2output;
run;

/*Table 1: Descriptive table of MOUD encounters by treatment group*/
data bw.heuristics_data_final;
set bw.heuristics_data_final;
quartile = 0;
if quartile1_black = 1 then quartile = 1;
if quartile2_black = 1 then quartile = 2;
if quartile3_black = 1 then quartile = 3;
if quartile4_black = 1 then quartile = 4;
run;


title "Table 1: Descriptive table of MOUD encounters by treatment group";
proc freq data=bw.heuristics_data_final;
	tables (age_gp gender race_ethnic elig_cat other_sud metro)*quartile/nocum norow nopercent missing;
	ods output crosstabfreqs=table1output;
run;

/*Figure 3: Main Regression*/
/*create interaction + dummy variables*/
data bw.heuristics_data_final;
set bw.heuristics_data_final;
quartile2xblack = 0;
quartile2xhispanic = 0;
quartile2xother = 0;
quartile3xblack = 0;
quartile3xhispanic = 0;
quartile3xother = 0;
quartile4xblack = 0;
quartile4xhispanic = 0;
quartile4xother = 0;
black = 0;
hispanic = 0;
other = 0;
female = 0;
if quartile = 2 and race_ethnic = 2 then quartile2xblack = 1;
if quartile = 2 and race_ethnic = 3 then quartile2xhispanic = 1;
if quartile = 2 and race_ethnic = 4 then quartile2xother = 1;
if quartile = 3 and race_ethnic = 2 then quartile3xblack = 1;
if quartile = 3 and race_ethnic = 3 then quartile3xhispanic = 1;
if quartile = 3 and race_ethnic = 4 then quartile3xother = 1;
if quartile = 4 and race_ethnic = 2 then quartile4xblack = 1;
if quartile = 4 and race_ethnic = 3 then quartile4xhispanic = 1;
if quartile = 4 and race_ethnic = 4 then quartile4xother = 1;
if race_ethnic = 2 then black = 1;
if race_ethnic = 3 then hispanic = 1;
if race_ethnic = 4 then other = 1;
if gender = 'F' then female = 1;
run;

/*probit*/
proc logistic data=bw.heuristics_data_final descending;
  model udt_w_oud_win_14days = quartile2_black quartile3_black quartile4_black quartile2xblack quartile2xhispanic 
quartile2xother quartile3xblack quartile3xhispanic quartile3xother quartile4xblack quartile4xhispanic quartile4xother 
black hispanic other female age metro other_sud;
run;

/*raw race probit*/
proc logistic data=bw.heuristics_data_final descending;
  model udt_w_oud_win_14days = black hispanic other female age metro other_sud;
run;
/*unique enrollees*/
data unique_enrl;
set bw.heuristics_data_final (keep = enrl_id);
run;

proc sort nodupkey data = unique_enrl out = unique_enrl;
by enrl_id;
run;

/*enroll - all years*/
data bw.enrl_allyears;
set bw.enrl_2016 bw.enrl_2017 bw.enrl_2018 bw.enrl_2019 bw.enrl_2020 bw.enrl_2021 bw.enrl_2022;
run;

/*supp analysis - Figure 2*/
/*count UDT by year and PROC_CODE*/
proc sql;
create table fig2_supp1 as
    select year, PROC_CODE, count(*) as total_count
    from bw.udt_allyears
    group by year, PROC_CODE;
quit;

/*1370394 observations read from the data set BW.UDT2_2016.
1578077 observations read from the data set BW.UDT2_2017.
1818612 observations read from the data set BW.UDT2_2018.
1546719 observations read from the data set BW.UDT2_2019.
958859 observations read from the data set BW.UDT2_2020.
1154486 observations read from the data set BW.UDT2_2021.
1267815 observations read from the data set BW.UDT2_2022.*/

/*count UDT matched to OUD by year*/
data bw.udt_oud_match_14days;
set bw.udt_oud_match_14days;
year = year(oud_date);
run;

data bw.udt_oud_match_14days_dedup;
set bw.udt_oud_match_14days_dedup;
year = year(oud_date);
run;

proc sql;
create table fig2_supp2 as
    select year, count(*) as total_count
    from bw.udt_oud_match_14days_dedup
    group by year;
quit;

proc print data = fig2_supp2;
run;
/*2016 304137 
  2017 393920 
  2018 466534 
  2019 450164 
  2020 323304 
  2021 425890 
  2022 437683*/

/*provider fixed effects*/

proc sql;
create table bw.countbyprov as
    select PRESCRIBING_PROVIDER_ID, count(*) as countbyprov
    from bw.heuristics_data_final
    group by PRESCRIBING_PROVIDER_ID;
quit;

data bw.countbyprov;
set bw.countbyprov;
over30 = 0;
over20 = 0;
over10 = 0;
if countbyprov >= 30 then over30 = 1;
if countbyprov >= 20 then over20 = 1;
if countbyprov >= 10 then over10 = 1;
run;

proc freq data=bw.countbyprov;
	tables over30 over20 over10 /nocum norow nopercent missing;
	ods output crosstabfreqs=countbyprov;
run;
